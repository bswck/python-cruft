# {{_origin|skeleton_notice(snref=snref, srev=srev)|custom_indent("# ")}}

[tool.poetry]
name = "{{repo}}"
version = "0.0.0"
description = "{{pypi_description}}"
authors = ["{{author}} <{{email}}>"]
license = "{{license}}"
readme = "README.md"
packages = [{ include = "{{package}}/" }]
homepage = "{{repo_url}}"
#% if cli %#
[tool.poetry.scripts]
{{package}} = "{{package}}"
#% endif %#
[tool.poetry.urls]
#%- if docs %#
Documentation = "{{docs_url}}"
#%- endif %#
Issues = "{{repo_url}}/issues"
#%- if pypi %#
Distribution = "{{pypi_url}}"
#%- endif %#
#%- if public %#
Coverage = "{{coverage_url}}"
#%- endif %#

[tool.poetry.dependencies]
python = ">={{python}},<{{python_ahead}}"

[tool.poetry.group.dev.dependencies]

[tool.poetry.group.dev-skeleton.dependencies]
#%- with included=True %#
#%- include "pyproject.toml" %#
#%- endwith %#

#% if docs -%#
[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
markdown-exec = ">=1.3.0"
mkdocs-material = ">=8.2,<10.0.0"
mkdocstrings = { version = ">=0.19.0", extras = ["python"] }
#%- endif %#

[tool.poe.tasks]
#%- if tests %#
test = "pytest -v"
#%- endif %#
lint = "ruff check ."
skeleton = "scripts/skeleton.{{sref}}.bash"
check = [
    #%- if tests %#
    { ref="test" },
    #%- endif %#
    { ref="lint" },
]
release.script = "scripts.release:main"

[tool.poe.tasks.added]
shell = "towncrier create $TICKET.added.md --edit"
args = [{name = "TICKET", default = "+", positional = true}]

[tool.poe.tasks.changed]
shell = "towncrier create $TICKET.changed.md --edit"
args = [{name = "TICKET", default = "+", positional = true}]

[tool.poe.tasks.fixed]
shell = "towncrier create $TICKET.fixed.md --edit"
args = [{name = "TICKET", default = "+", positional = true}]

[tool.poe.tasks.deprecated]
shell = "towncrier create $TICKET.deprecated.md --edit"
args = [{name = "TICKET", default = "+", positional = true}]

[tool.poe.tasks.removed]
shell = "towncrier create $TICKET.removed.md --edit"
args = [{name = "TICKET", default = "+", positional = true}]

[tool.poe.tasks.security]
shell = "towncrier create $TICKET.security.md --edit"
args = [{name = "TICKET", default = "+", positional = true}]

[tool.ruff]
exclude = ["tests/", "scripts/"]
# To discuss the presented rationales, contact the author (bswck).
select = ["ALL"]
ignore = [
    # Description: Missing type annotation for self in method
    # Rationale: It is mostly redundant, as is for ANN102.
    "ANN101",

    # Description: Missing type annotation for cls in method
    # Rationale: It is mostly redundant, as is for ANN101.
    "ANN102",

    # Description: Dynamically typed expressions (typing.Any) are disallowed
    # Rationale:
    #  We use Any to allow user to constrain return types of our functions on their own.
    #  For example, having a function `def foo() -> Any: ...` allows user to write
    #  `my_foo: int = foo()` and have it passed type checking, since `Any` disables
    #  type checking completely.
    "ANN401",

    # Description: 1 blank line required before class docstring
    # Rationale: Remove the warning -- D211 (no-blank-line-before-class) preferred.
    "D203",

    # Description: Multi-line docstring summary should start at the second line
    # Rationale: Remove the warning -- D213 (multi-line-summary-second-line) preferred.
    "D212",

    # Description: Line contains TODO, consider resolving the issue
    # Rationale: Not appropriate for the project.
    "FIX002",
]

[tool.mypy]
strict = true

[tool.isort]
profile = "black"

[tool.towncrier]
directory = "news"
package = "{{package}}"
filename = "CHANGELOG.md"
start_string = "<!-- insertion marker -->\n"
underlines = ["", "", ""]  # We use Markdown
title_format = "## [{version}]({{repo_url}}/tree/{version}) ({project_date})"
issue_format = "[#{issue}]({{repo_url}}/issues/{issue})"

[[tool.towncrier.type]]
directory = "security"
name = "Security"
showcontent = true

[[tool.towncrier.type]]
directory = "removed"
name = "Removed"
showcontent = true

[[tool.towncrier.type]]
directory = "deprecated"
name = "Deprecated"
showcontent = true

[[tool.towncrier.type]]
directory = "added"
name = "Added"
showcontent = true

[[tool.towncrier.type]]
directory = "changed"
name = "Changed"
showcontent = true

[[tool.towncrier.type]]
directory = "fixed"
name = "Fixed"
showcontent = true

[tool.coverage.run]
plugins = ["covdefaults"]
source = ["{{package}}/"]

[tool.coverage.report]
exclude_also = [
    # Be sure to include lines that are not meant to be covered
    # by tests or encountered by the users at runtime.
    "raise NotImplementedError",          # Do not cover abstract methods.
    "if ((t|typing)\\.?)?TYPE_CHECKING:", # Do not cover type checking imports.
    "@((t|typing)\\.?)?overload",         # Do not cover overload definitions.
    "\\(((t|typing)\\.?)?Protocol\\):$",  # Do not cover entire protocol definitions.
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
